"use strict";

import Slugger from "github-slugger";
import React from "react";
import { Dimensions, ScrollView, Text, TouchableHighlight, View } from "react-native";
import MDImage from "./../components/MDImage";
import MDList from "./../components/MDList";
import MDSvg from "./../components/MDSvg";
import MDTable from "./../components/MDTable";
import { onLinkPress } from "../utils/handlers";
import { getTableWidthArr } from "../utils/table";
import { jsx as _jsx } from "react/jsx-runtime";
class Renderer {
  slugPrefix = "react-native-marked-ele";
  constructor() {
    this.slugger = new Slugger();
    const {
      width
    } = Dimensions.get("window");
    this.windowWidth = width;
  }
  paragraph(children, styles) {
    return this.getViewNode(children, styles);
  }
  blockquote(children, styles) {
    return this.getBlockquoteNode(children, styles);
  }
  heading(text, styles) {
    return this.getTextNode(text, styles);
  }
  code(text, _language, containerStyle, textStyle) {
    return /*#__PURE__*/_jsx(ScrollView, {
      horizontal: true,
      contentContainerStyle: containerStyle,
      children: /*#__PURE__*/_jsx(View, {
        children: this.getTextNode(text, textStyle)
      })
    }, this.getKey());
  }
  hr(styles) {
    return this.getViewNode(null, styles);
  }
  listItem(children, styles) {
    return this.getViewNode(children, styles);
  }
  list(ordered, li, listStyle, textStyle, startIndex) {
    return /*#__PURE__*/_jsx(MDList, {
      ordered: ordered,
      li: li,
      listStyle: listStyle,
      textStyle: textStyle,
      startIndex: startIndex
    }, this.getKey());
  }
  escape(text, styles) {
    return this.getTextNode(text, styles);
  }
  link(children, href, styles) {
    return /*#__PURE__*/_jsx(Text, {
      selectable: true,
      accessibilityRole: "link",
      accessibilityHint: "Opens in a new window",
      onPress: onLinkPress(href),
      style: styles,
      children: children
    }, this.getKey());
  }
  image(uri, alt, style) {
    const key = this.getKey();
    if (uri.endsWith(".svg")) {
      return /*#__PURE__*/_jsx(MDSvg, {
        uri: uri
      }, key);
    }
    return /*#__PURE__*/_jsx(MDImage, {
      uri: uri,
      alt: alt,
      style: style
    }, key);
  }
  strong(children, styles) {
    return this.getTextNode(children, styles);
  }
  em(children, styles) {
    return this.getTextNode(children, styles);
  }
  codespan(text, styles) {
    return this.getTextNode(text, styles);
  }
  br() {
    return this.getTextNode("\n", {});
  }
  del(children, styles) {
    return this.getTextNode(children, styles);
  }
  text(text, styles) {
    return this.getTextNode(text, styles);
  }
  html(text, styles) {
    return this.getTextNode(text, styles);
  }
  linkImage(href, imageUrl, alt, style) {
    const imageNode = this.image(imageUrl, alt, style);
    return /*#__PURE__*/_jsx(TouchableHighlight, {
      accessibilityRole: "link",
      accessibilityHint: "Opens in a new window",
      onPress: onLinkPress(href),
      children: imageNode
    }, this.getKey());
  }
  table(header, rows, tableStyle, rowStyle, cellStyle) {
    const widthArr = getTableWidthArr(header.length, this.windowWidth);
    const {
      borderWidth,
      borderColor
    } = tableStyle || {};
    return /*#__PURE__*/_jsx(MDTable, {
      header: header,
      rows: rows,
      widthArr: widthArr,
      rowStyle: rowStyle,
      cellStyle: cellStyle,
      borderColor: borderColor,
      borderWidth: borderWidth
    });
  }
  getKey() {
    return this.slugger.slug(this.slugPrefix);
  }
  getTextNode(children, styles) {
    return /*#__PURE__*/_jsx(Text, {
      selectable: true,
      style: styles,
      children: children
    }, this.getKey());
  }
  getViewNode(children, styles) {
    return /*#__PURE__*/_jsx(View, {
      style: styles,
      children: children
    }, this.getKey());
  }
  getBlockquoteNode(children, styles) {
    return /*#__PURE__*/_jsx(View, {
      style: styles,
      children: children
    }, this.getKey());
  }
}
export default Renderer;
//# sourceMappingURL=Renderer.js.map