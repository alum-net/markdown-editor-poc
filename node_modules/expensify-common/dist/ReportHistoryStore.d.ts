export default class ReportHistoryStore {
    constructor(API: any, PubSub: any);
    API: any;
    /**
     * Main report history cache
     * Map of reportIDs with value of report history items array
     */
    cache: {};
    /**
     * PubSub instance used for the bindCacheClearingEvents method.
     *
     * Since Mobile and Web use different instances of PubSub, this is unfortunately necessary to subscribe to
     * events in both code bases.
     */
    PubSub: any;
    /**
     * Filters out actions we never want to display on web or mobile.
     *
     * @param {Object[]} historyItems
     *
     * @returns {Object[]}
     */
    filterHiddenActions: (historyItems: Object[]) => Object[];
    /**
     * Merges history items into the cache and creates it if it doesn't yet exist.
     *
     * @param {Number} reportID
     * @param {Object[]} newHistory
     */
    mergeItems(reportID: number, newHistory: Object[]): void;
    /**
     * Merges history items into the cache and creates it if it doesn't yet exist.
     *
     * @param {Number} reportID
     * @param {Object[]} newHistory
     */
    mergeHistoryByTimestamp(reportID: number, newHistory: Object[]): void;
    /**
     * Merges history items by reportActionID into the cache and creates it if it doesn't yet exist.
     *
     * @param {Number} reportID
     * @param {Object[]} newHistory
     */
    mergeHistoryByReportActionID(reportID: number, newHistory: Object[]): void;
    /**
     * Gets the history.
     *
     * @param {Number} reportID
     * @param {Boolean} ignoreCache
     *
     * @returns {Deferred}
     */
    get(reportID: number, ignoreCache: boolean): Deferred;
    /**
     * Gets the history. This flow does not depend on the deprecated sequence number in report actions.
     *
     * @param {Number} reportID
     * @param {Boolean} ignoreCache
     *
     * @returns {Deferred}
     */
    getFlatHistory(reportID: number, ignoreCache: boolean): Deferred;
    /**
     * Gets the history from the cache if it exists. Otherwise fully loads the history.
     *
     * @param {Number} reportID
     *
     * @return {Deferrred}
     */
    getFromCache(reportID: number): Deferrred;
}
