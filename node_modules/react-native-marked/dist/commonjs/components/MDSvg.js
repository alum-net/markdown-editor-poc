"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSvg = require("react-native-svg");
var _svg = require("./../utils/svg");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const MDSvg = ({
  uri,
  alt = "image"
}) => {
  const isFirstLoad = (0, _react.useRef)(false);
  const [layoutWidth, setLayoutWidth] = (0, _react.useState)(0);
  const [svgState, setSvgState] = (0, _react.useState)({
    viewBox: "",
    width: 0,
    height: 0,
    svg: "",
    isLoading: true,
    error: false,
    aspectRatio: undefined
  });
  (0, _react.useEffect)(() => {
    const fetchSvg = async () => {
      try {
        const res = await fetch(uri);
        const text = await res.text();
        if (res.status !== 200) {
          throw new Error("Status is not 200");
        }
        const {
          viewBox,
          width,
          height
        } = (0, _svg.getSvgDimensions)(text);
        setSvgState({
          width,
          height,
          viewBox,
          svg: text,
          isLoading: false,
          error: false,
          aspectRatio: width / height
        });
      } catch (_e) {
        setSvgState(state => ({
          ...state,
          error: true,
          isLoading: false
        }));
      }
    };
    fetchSvg();
  }, [uri]);
  const onLayout = event => {
    if (!isFirstLoad.current) {
      setLayoutWidth(event.nativeEvent.layout.width ?? 0);
      isFirstLoad.current = true;
    }
  };
  const getWidth = () => {
    if (layoutWidth && svgState.width) {
      return Math.min(layoutWidth, svgState.width);
    }
    return "100%";
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
    style: {
      width: getWidth(),
      aspectRatio: svgState.aspectRatio
    },
    onLayout: onLayout,
    children: svgState.isLoading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      size: "small"
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativeSvg.SvgFromXml, {
      xml: svgState.svg,
      width: "100%",
      height: "100%",
      viewBox: svgState.viewBox,
      "aria-label": alt,
      accessibilityRole: "image",
      accessibilityLabel: alt,
      accessibilityHint: undefined,
      testID: "react-native-marked-md-svg"
    })
  });
};
var _default = exports.default = /*#__PURE__*/(0, _react.memo)(MDSvg);
//# sourceMappingURL=MDSvg.js.map