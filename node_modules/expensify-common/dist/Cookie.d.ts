declare namespace _default {
    export let NAME_LAST_PAGE: string;
    export let NAME_LAST_REPORTS_PAGE: string;
    export let NAME_STASHED_SUPPORT: string;
    export let NAME_WEB_COOKIE: string;
    export let NAME_EXPENSES_VIEW_MODE: string;
    export let MOBILE_APP_VERSION: string;
    export let TWO_FACTOR_DEVICE_TOKEN: string;
    export { enabled };
    export { remove };
    export { get };
    export { getJSON };
    export { has };
    export { getHelpLink };
    export { set };
}
export default _default;
/**
 * Detects if cookies are currently enabled in the browser
 * by trying to create a cookie, see if it exists, and delete it afterwards again.
 *
 * @return {Boolean} True if cookies are enabled, otherwise false.
 */
declare function enabled(): boolean;
/**
 * Deletes a cookie.
 *
 * @param {String} name The name of the cookie to delete.
 */
declare function remove(name: string): void;
/**
 * Fetches the value of a cookie.
 *
 * @param  {String} name The name of the cookie to fetch.
 * @return {String|null} The value of the cookie.
 */
declare function get(name: string): string | null;
/**
 * Parses a cookie value to JSON.
 * Returns a default value specified by param or null.
 *
 * @param {String} name
 * @param {Any|null} defaultValue
 *
 * @return {Any|null}
 */
declare function getJSON(name: string, defaultValue?: Any | null): Any | null;
/**
 * Find a cookie that has been set.
 *
 * @param {String} name Name of the cookie to find
 * @return {Boolean} Whether or not the cookie is set
 */
declare function has(name: string): boolean;
/**
 * Returns help link when cookies are enabled or null.
 *
 * @return {(String|null)}
 */
declare function getHelpLink(): (string | null);
/**
 * Sets the value of a cookie and when it will expire.
 *
 * @param {String} name The name of the cookie.
 * @param {String} value The value of the cookie.
 * @param {Number} [expiredays] The number of days until the cookie expires.
 */
declare function set(name: string, value: string, expiredays?: number): void;
