declare const _default: {
    /**
     * Given a templatePath, return the value
     *
     * @param {Array} templatePath
     * @param {Object} [data] Information that need to be injected into the template
     * @return {String}
     */
    get(templatePath: any[], data?: Object): string;
    /**
     * Given a templatePath, does it have a registered template?
     * @param  {Array} templatePath
     * @return {Boolean}
     */
    has(templatePath: any[]): boolean;
    /**
     * Inits the templating engine, and slurps all DOM templates in an internal data structure
     */
    init(): void;
    /**
     * Register a new json object in the template manager
     *
     * @param {Array} wantedNamespace Namespace where we want to store the templates
     * @param {object} templateData The literal object that contain the templates
     */
    register(wantedNamespace: any[], templateData: object): void;
    /**
     * Removes a namespace from the templateStore (only used for testing purposes)
     *
     * @param {String} nameSpace
     */
    unregister(nameSpace: string): void;
    /**
     * Replace the DOM HTML with the template value
     *
     * @param {jQuery} $target Element(s) that will be updated
     * @param {Array} templatePath
     * @param {Object} [data] Information that need to be injected into the template
     */
    insert($target: JQueryStatic, templatePath: any[], data?: Object): void;
    /**
     * Append the template value into a DOM elements
     *
     * @param {jQuery} $target Element(s) that will be updated
     * @param {Array} templatePath
     * @param {Object} data Information that need to be injected into the template
     */
    prepend($target: JQueryStatic, templatePath: any[], data: Object): void;
    /**
     * Prepend the template value into a DOM elements
     *
     * @param {jQuery} $target Element(s) that will be updated
     * @param {array} templatePath
     * @param {object} [data] Information that need to be injected into the template
     */
    append($target: JQueryStatic, templatePath: array, data?: object): void;
};
export default _default;
