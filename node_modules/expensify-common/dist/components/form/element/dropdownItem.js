"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const classnames_1 = __importDefault(require("classnames"));
const str_1 = __importDefault(require("../../../str"));
/**
 * A very basic dropdown item
 */
const propTypes = {
    // The function to be called when this item is being clicked
    onClick: prop_types_1.default.func.isRequired,
    // The value of the option, should be unique
    value: prop_types_1.default.any.isRequired, // eslint-disable-line react/forbid-prop-types
    // The human readable text of the option
    text: prop_types_1.default.string,
    // If we need more than text to style more each option
    children: prop_types_1.default.element,
    // Whether or not the option is currently disabled
    disabled: prop_types_1.default.bool,
    // Whether or not the option is currently in focus
    focused: prop_types_1.default.bool,
    // Whether or not the option is currently selected
    isSelected: prop_types_1.default.bool,
    // Whether or not the option can be selected
    isSelectable: prop_types_1.default.bool,
    // Whether this item is a divider or not
    divider: prop_types_1.default.bool,
    // Bootstrap 4 compatibility flag
    bs4: prop_types_1.default.bool,
    // An array of extra classes to put on the combobox
    extraClasses: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array, prop_types_1.default.object]),
};
const defaultProps = {
    text: '',
    children: null,
    disabled: false,
    focused: false,
    isSelected: false,
    isSelectable: true,
    divider: false,
    bs4: false,
    extraClasses: [],
};
class DropDownItem extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.createTooltip = this.createTooltip.bind(this);
        this.hasInstantiatedTooltip = false;
    }
    componentWillUnmount() {
        this.destroyTooltip();
    }
    /**
     * Only instantiate the tooltip this dropdown item contains
     */
    createTooltip() {
        if (this.hasInstantiatedTooltip) {
            return;
        }
        this.tooltipContainer.tooltip({
            template: '<div class="tooltip tooltip--from-combobox" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        });
        this.hasInstantiatedTooltip = true;
    }
    /**
     * If there is an instantiated tooltip on the component, destroy it
     */
    destroyTooltip() {
        if (!this.hasInstantiatedTooltip) {
            return;
        }
        this.tooltipContainer.tooltip('destroy');
        this.hasInstantiatedTooltip = false;
    }
    render() {
        const classes = {
            a: {
                focus: this.props.focused,
            },
            liOrButton: {
                active: this.props.isSelected && this.props.isSelectable !== false,
                'li-compact': !this.props.bs4,
                'dropdown-item': this.props.bs4,
                disabled: this.props.isSelectable === false || this.props.disabled,
                'dropdown-header': this.props.disabled,
                divider: this.props.divider,
            },
        };
        const extraClasses = (0, classnames_1.default)('expensicons expensicons-checkmark', this.props.extraClasses);
        // Don't do anything when clicking if we can't select something
        const clickHandler = this.props.isSelectable !== false && !this.props.disabled ? this.props.onClick : () => { };
        // Special rendering if we're in Bootstrap 4 compat mode
        if (this.props.bs4) {
            if (this.props.divider) {
                return react_1.default.createElement("div", { className: "dropdown-divider" });
            }
            return (react_1.default.createElement("button", { type: "button", className: (0, classnames_1.default)(classes.liOrButton), onClick: clickHandler, "data-toggle": "tooltip", "data-container": "body", "data-delay": '{"show":1000, "hide":100}', "data-value": this.props.value, title: typeof this.props.children === 'string' ? this.props.children : str_1.default.htmlDecode(this.props.text) },
                this.props.isSelected && this.props.isSelectable !== false ? (react_1.default.createElement("span", null,
                    react_1.default.createElement("i", { className: extraClasses }),
                    ' ')) : (''),
                this.props.children || str_1.default.htmlDecode(this.props.text)));
        }
        return (react_1.default.createElement("li", { className: (0, classnames_1.default)(classes.liOrButton), "data-value": this.props.value }, !this.props.divider && (
        // eslint-disable-next-line jsx-a11y/anchor-is-valid
        react_1.default.createElement("a", { href: "#", className: (0, classnames_1.default)(classes.a), onClick: clickHandler, role: "button", tabIndex: "-1", "data-toggle": "tooltip", onMouseEnter: this.createTooltip, onFocus: this.createTooltip, "data-container": "body", "data-delay": '{"show":1000, "hide":100}', title: typeof this.props.children === 'string' ? this.props.children : str_1.default.htmlDecode(this.props.text), ref: (el) => (this.tooltipContainer = $(el)) },
            this.props.isSelected && this.props.isSelectable !== false ? (react_1.default.createElement("span", null,
                react_1.default.createElement("i", { className: extraClasses }),
                ' ')) : (''),
            this.props.children || str_1.default.htmlDecode(this.props.text)))));
    }
}
DropDownItem.propTypes = propTypes;
DropDownItem.defaultProps = defaultProps;
exports.default = DropDownItem;
