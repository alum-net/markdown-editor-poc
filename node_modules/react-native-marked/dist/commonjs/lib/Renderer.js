"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _githubSlugger = _interopRequireDefault(require("github-slugger"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _MDImage = _interopRequireDefault(require("./../components/MDImage"));
var _MDList = _interopRequireDefault(require("./../components/MDList"));
var _MDSvg = _interopRequireDefault(require("./../components/MDSvg"));
var _MDTable = _interopRequireDefault(require("./../components/MDTable"));
var _handlers = require("../utils/handlers");
var _table = require("../utils/table");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class Renderer {
  slugPrefix = "react-native-marked-ele";
  constructor() {
    this.slugger = new _githubSlugger.default();
    const {
      width
    } = _reactNative.Dimensions.get("window");
    this.windowWidth = width;
  }
  paragraph(children, styles) {
    return this.getViewNode(children, styles);
  }
  blockquote(children, styles) {
    return this.getBlockquoteNode(children, styles);
  }
  heading(text, styles) {
    return this.getTextNode(text, styles);
  }
  code(text, _language, containerStyle, textStyle) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      horizontal: true,
      contentContainerStyle: containerStyle,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        children: this.getTextNode(text, textStyle)
      })
    }, this.getKey());
  }
  hr(styles) {
    return this.getViewNode(null, styles);
  }
  listItem(children, styles) {
    return this.getViewNode(children, styles);
  }
  list(ordered, li, listStyle, textStyle, startIndex) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MDList.default, {
      ordered: ordered,
      li: li,
      listStyle: listStyle,
      textStyle: textStyle,
      startIndex: startIndex
    }, this.getKey());
  }
  escape(text, styles) {
    return this.getTextNode(text, styles);
  }
  link(children, href, styles) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
      selectable: true,
      accessibilityRole: "link",
      accessibilityHint: "Opens in a new window",
      onPress: (0, _handlers.onLinkPress)(href),
      style: styles,
      children: children
    }, this.getKey());
  }
  image(uri, alt, style) {
    const key = this.getKey();
    if (uri.endsWith(".svg")) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MDSvg.default, {
        uri: uri
      }, key);
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MDImage.default, {
      uri: uri,
      alt: alt,
      style: style
    }, key);
  }
  strong(children, styles) {
    return this.getTextNode(children, styles);
  }
  em(children, styles) {
    return this.getTextNode(children, styles);
  }
  codespan(text, styles) {
    return this.getTextNode(text, styles);
  }
  br() {
    return this.getTextNode("\n", {});
  }
  del(children, styles) {
    return this.getTextNode(children, styles);
  }
  text(text, styles) {
    return this.getTextNode(text, styles);
  }
  html(text, styles) {
    return this.getTextNode(text, styles);
  }
  linkImage(href, imageUrl, alt, style) {
    const imageNode = this.image(imageUrl, alt, style);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, {
      accessibilityRole: "link",
      accessibilityHint: "Opens in a new window",
      onPress: (0, _handlers.onLinkPress)(href),
      children: imageNode
    }, this.getKey());
  }
  table(header, rows, tableStyle, rowStyle, cellStyle) {
    const widthArr = (0, _table.getTableWidthArr)(header.length, this.windowWidth);
    const {
      borderWidth,
      borderColor
    } = tableStyle || {};
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MDTable.default, {
      header: header,
      rows: rows,
      widthArr: widthArr,
      rowStyle: rowStyle,
      cellStyle: cellStyle,
      borderColor: borderColor,
      borderWidth: borderWidth
    });
  }
  getKey() {
    return this.slugger.slug(this.slugPrefix);
  }
  getTextNode(children, styles) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
      selectable: true,
      style: styles,
      children: children
    }, this.getKey());
  }
  getViewNode(children, styles) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles,
      children: children
    }, this.getKey());
  }
  getBlockquoteNode(children, styles) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles,
      children: children
    }, this.getKey());
  }
}
var _default = exports.default = Renderer;
//# sourceMappingURL=Renderer.js.map