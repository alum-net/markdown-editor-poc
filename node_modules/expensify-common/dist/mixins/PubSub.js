"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PubSub_1 = __importDefault(require("../PubSub"));
const Utils = __importStar(require("../utils"));
const PubSub = (Utils.isWindowAvailable() && window.PubSub) || PubSub_1.default;
/**
 * This mixin sets up automatic PubSub bindings which will be removed when
 * the component is unmounted.
 *
 * Usage:
 * MyView = window.CreateClass({
 *     mixins: [React.m.PubSub],
 *     componentDidMount() {
 *         this.subscribe('event_name', () => {
 *             console.log('event was triggered');
 *         });
 *     }
 * });
 */
const PubSubMixin = {
    UNSAFE_componentWillMount() {
        this.eventIds = [];
    },
    /**
     * Registers an event listener for a PubSub event and keeps track of the event ID
     * @param  {String}   name
     * @param  {Function} callback
     */
    subscribe(name, callback) {
        this.eventIds.push(PubSub.subscribe(name, callback, this));
    },
    /**
     * Publish an event
     * @param  {String} name
     * @param  {Object} [data]
     */
    publish(name, data) {
        PubSub.publish(name, data || {});
    },
    /**
     * When the component is unmounted, we want to subscribe from all of our event IDs
     */
    componentWillUnmount() {
        this.eventIds.forEach((eventId) => {
            PubSub.unsubscribe(eventId);
        });
    },
};
exports.default = PubSubMixin;
