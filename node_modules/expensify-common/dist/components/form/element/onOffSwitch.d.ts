export default OnOffSwitch;
declare class OnOffSwitch extends React.Component<any, any, any> {
    constructor(props: any);
    /**
     * Callback function called after toggling the switch
     * @param {boolean} newState
     */
    onChangeCallback(newState: boolean): void;
    /**
     * Force switch off and prevent editing it
     * @param {boolean} checked
     * @param {string} msg
     */
    lock(checked: boolean, msg: string): void;
    /**
     * Release switch to its original value, and allow editing it
     */
    unlock(): void;
    /**
     * Is the switch on or off ?
     *
     * @returns {boolean} true if on
     */
    getValue(): boolean;
    /**
     * Toggle the state of this switch.
     *
     * Note: this is used via refs, so please don't delete it unless you know what you're doing :D
     */
    toggle(): void;
    state: {
        checked: any;
        preventEdit: any;
        preventEditDescription: string;
    };
    render(): React.JSX.Element;
}
declare namespace OnOffSwitch {
    export { propTypes };
    export { defaultProps };
}
import React from 'react';
declare namespace propTypes {
    let id: PropTypes.Validator<string>;
    let label: PropTypes.Requireable<string>;
    let labelOnRight: PropTypes.Requireable<boolean>;
    let labelClasses: PropTypes.Requireable<any>;
    let checked: PropTypes.Validator<boolean>;
    let onChangeCallback: PropTypes.Requireable<(...args: any[]) => any>;
    let children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    let preventEdit: PropTypes.Requireable<boolean>;
    let description: PropTypes.Requireable<string>;
    let onlyShowDescriptionWhenOn: PropTypes.Requireable<boolean>;
    let noLeftPaddingOnChildren: PropTypes.Requireable<boolean>;
    let alwaysShowChildren: PropTypes.Requireable<boolean>;
    let descriptionBeforeChildren: PropTypes.Requireable<boolean>;
    let safeDescription: PropTypes.Requireable<boolean>;
    let extraClasses: PropTypes.Requireable<NonNullable<string | object | null | undefined>>;
    let hideEnabledDisabledText: PropTypes.Requireable<boolean>;
    let tooltipText: PropTypes.Requireable<string>;
}
declare namespace defaultProps {
    let label_1: string;
    export { label_1 as label };
    let labelOnRight_1: boolean;
    export { labelOnRight_1 as labelOnRight };
    let labelClasses_1: null;
    export { labelClasses_1 as labelClasses };
    export function onChangeCallback_1(): void;
    export { onChangeCallback_1 as onChangeCallback };
    let children_1: null;
    export { children_1 as children };
    let preventEdit_1: boolean;
    export { preventEdit_1 as preventEdit };
    let description_1: string;
    export { description_1 as description };
    let onlyShowDescriptionWhenOn_1: boolean;
    export { onlyShowDescriptionWhenOn_1 as onlyShowDescriptionWhenOn };
    let noLeftPaddingOnChildren_1: boolean;
    export { noLeftPaddingOnChildren_1 as noLeftPaddingOnChildren };
    let alwaysShowChildren_1: boolean;
    export { alwaysShowChildren_1 as alwaysShowChildren };
    let descriptionBeforeChildren_1: boolean;
    export { descriptionBeforeChildren_1 as descriptionBeforeChildren };
    let safeDescription_1: boolean;
    export { safeDescription_1 as safeDescription };
    let hideEnabledDisabledText_1: boolean;
    export { hideEnabledDisabledText_1 as hideEnabledDisabledText };
    let extraClasses_1: never[];
    export { extraClasses_1 as extraClasses };
    let tooltipText_1: string;
    export { tooltipText_1 as tooltipText };
}
import PropTypes from 'prop-types';
