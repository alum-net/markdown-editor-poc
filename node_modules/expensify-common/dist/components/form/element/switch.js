"use strict";
/* globals Func, Modal */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const classnames_1 = __importDefault(require("classnames"));
/**
 * Form Element Switch - Displays an on/off switch
 */
const propTypes = {
    id: prop_types_1.default.string.isRequired,
    // If it is turned on by default
    checked: prop_types_1.default.bool,
    // If it is disabled or not
    disabled: prop_types_1.default.bool,
    // A callback method for when the value is changed
    onChange: prop_types_1.default.func,
    // A configuration object that is passed to Modal.confirm() if we want to have
    // the user confirm their choice
    confirm: prop_types_1.default.object, // eslint-disable-line react/forbid-prop-types
    // An array of extra classes to put on the combobox
    extraClasses: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array, prop_types_1.default.object]),
    // There is usually text just following a switch that says "ENABLED" and "DISABLED" and
    // you can use this option to hide that text
    hideEnabledDisabledText: prop_types_1.default.bool,
    // Text to display in a tooltip
    tooltipText: prop_types_1.default.string,
};
const defaultProps = {
    checked: false,
    disabled: false,
    onChange: () => { },
    confirm: null,
    extraClasses: [],
    hideEnabledDisabledText: false,
    tooltipText: '',
};
class Switch extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.fireChangeHandler = this.fireChangeHandler.bind(this);
        this.showConfirm = this.showConfirm.bind(this);
        this.checkbox = null;
        this.element = null;
    }
    componentDidMount() {
        $(this.element).tooltip('destroy').tooltip();
    }
    /**
     * Gets the value of the field
     *
     * @return {boolean}
     */
    getValue() {
        return $(this.checkbox)[0].checked;
    }
    /**
     * Fires the change handler with the current value
     */
    fireChangeHandler() {
        // Don't do anything here if we want the user to confirm their choice
        if (this.props.confirm) {
            return;
        }
        Func.invoke(this.props.onChange, [this.getValue()]);
    }
    /**
     * If there was a confirm object specified in our properties,
     * then we need to open a confirm modal with those settings
     *
     * @param {SyntheticEvent} e
     * @return {Boolean}
     */
    showConfirm(e) {
        var _a;
        // Let our event happen normally
        if (!this.props.confirm) {
            return true;
        }
        e.preventDefault();
        Modal.confirm(Object.assign(Object.assign({}, ((_a = this.props.confirm) !== null && _a !== void 0 ? _a : {})), { onYesCallback: () => {
                // Toggle the checked property and then fire our change handler
                this.checkbox.checked = !this.getValue();
                Func.invoke(this.props.onChange, [this.getValue()]);
            } }));
        return false;
    }
    render() {
        return (react_1.default.createElement("span", { className: (0, classnames_1.default)('onoffswitch-wrapper js_tooltip', this.props.extraClasses), title: this.props.tooltipText, ref: (el) => (this.element = el) },
            react_1.default.createElement("input", { ref: (el) => (this.checkbox = el), type: "checkbox", id: this.props.id, className: "onoffswitch-checkbox", checked: this.props.checked, disabled: this.props.disabled, onClick: this.showConfirm, onChange: this.fireChangeHandler }),
            react_1.default.createElement("label", { className: "onoffswitch-label", htmlFor: this.props.id },
                react_1.default.createElement("span", { className: (0, classnames_1.default)('onoffswitch-inner', { noText: this.props.hideEnabledDisabledText }) }),
                react_1.default.createElement("span", { className: "onoffswitch-switch" }))));
    }
}
Switch.propTypes = propTypes;
Switch.defaultProps = defaultProps;
exports.default = Switch;
