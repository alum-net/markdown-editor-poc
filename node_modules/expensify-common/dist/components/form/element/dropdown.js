"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const classnames_1 = __importDefault(require("classnames"));
const uniqueId_1 = __importDefault(require("lodash/uniqueId"));
const dropdownItem_1 = __importDefault(require("./dropdownItem"));
const propTypes = {
    // These are the elements to show in the dropdown
    options: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        // The value of the option, should be unique
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        // The human readable text of the option
        text: prop_types_1.default.string,
        // If we need more than text to style more each option
        children: prop_types_1.default.element,
        // Whether or not the option is currently disabled
        disabled: prop_types_1.default.bool,
        // Whether or not the option is currently in focus
        focused: prop_types_1.default.bool,
        // Whether or not the option is currently selected
        isSelected: prop_types_1.default.bool,
        // Whether or not the option can be selected
        isSelectable: prop_types_1.default.bool,
    })).isRequired,
    // A callback that is triggered when a selection is made and passes the value
    // of the selected option as the only parameter
    onChange: prop_types_1.default.func,
    // Bootstrap 4 compatibility flag
    bs4: prop_types_1.default.bool,
    // An array of extra classes to put on the combobox
    extraClasses: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array, prop_types_1.default.object]),
};
const defaultProps = {
    onChange: () => { },
    bs4: false,
    extraClasses: [],
};
class DropDown extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.handleClick = this.handleClick.bind(this);
        this.renderOption = this.renderOption.bind(this);
    }
    handleClick(option) {
        if (option.isSelectable === false || option.disabled) {
            return;
        }
        this.props.onChange(option.value);
    }
    renderOption(option) {
        return (react_1.default.createElement(dropdownItem_1.default, { key: (0, uniqueId_1.default)(), bs4: this.props.bs4, value: option.value, text: option.text || '', 
            // eslint-disable-next-line react/no-children-prop
            children: option.children || null, disabled: option.disabled || false, focused: option.focused || false, isSelected: option.isSelected || false, isSelectable: option.isSelectable || true, divider: option.divider || false, extraClasses: option.extraClasses || [], onClick: () => this.handleClick(option) }, option.children));
    }
    render() {
        const { options, extraClasses } = this.props;
        return react_1.default.createElement("ul", { className: (0, classnames_1.default)('dropdown-menu', extraClasses) }, options.map(this.renderOption));
    }
}
DropDown.propTypes = propTypes;
DropDown.defaultProps = defaultProps;
exports.default = DropDown;
