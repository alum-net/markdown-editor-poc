/**
 * Invokes the given callback with the given arguments
 *
 * @param {Function} callback
 * @param {Array} [args]
 * @param {Object} [scope]
 *
 * @returns {Mixed}
 */
export function invoke(callback: Function, args?: any[], scope?: Object): Mixed;
/**
 * This is nearly the same as invoke, except that it assumes that the callback returns a promise. The callback doesn't
 * HAVE to return a promise, but it CAN, and if it doesn't, then we provide a promise
 *
 * @param {Function} callback
 * @param {Array} [args]
 * @param {Object} [scope]
 *
 * @returns {Promise}
 */
export function invokeAsync(callback: Function, args?: any[], scope?: Object): Promise<any>;
/**
 * Invokes all the given callbacks with the given arguments
 *
 * @param {Function[]} callbacks
 * @param {Array} [args]
 */
export function bulkInvoke(callbacks: Function[], args?: any[]): void;
/**
 * Throws an uncaught error in an attempt to stop JS execution
 */
export function die(): void;
/**
 * Call the method on a list of objects
 *
 * @param {object|array} list
 * @param {string} methodName
 * @returns {Array}
 */
export function mapByName(list: object | array, methodName: string): any[];
