"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const clipboard_1 = __importDefault(require("clipboard"));
const prop_types_1 = __importDefault(require("prop-types"));
const propTypes = {
    // Callback fired when text has been copied - useful to display UI confirmation
    onSuccess: prop_types_1.default.func,
    // The text to be copied
    textContent: prop_types_1.default.string,
    // Function as a child exposes the copyTextToClipboard fuction
    children: prop_types_1.default.func.isRequired,
};
const defaultProps = {
    onSuccess: () => { },
    textContent: '',
};
/**
 * Simple render prop component that encapsulates the Clipboard feature and exposes a function that can be tied to any event
 *
 * @example
 *
 * <React.c.CopyText textContent="I am some text" onSuccess={() => {}}>
 *    {copy => (
 *        <React.c.Button onClick={copy}>
 *            Copy Me!
 *        </React.c.Button>
 *     )}
 * </React.c.CopyText>
 */
class CopyText extends react_1.default.Component {
    componentDidMount() {
        this.hiddenLink = document.createElement('a');
        // Sets up the clipboard instance
        this.clipboard = new clipboard_1.default(this.hiddenLink, {
            text: () => this.props.textContent,
        });
        // Fires callback when the clipboard has succesfully copied
        this.clipboard.on('success', () => {
            this.props.onSuccess();
        });
    }
    componentWillUnmount() {
        this.clipboard.destroy();
    }
    /**
     * Fires click event on invisible link
     */
    copyTextToClipboard() {
        this.hiddenLink.click();
    }
    render() {
        return this.props.children(() => this.copyTextToClipboard());
    }
}
CopyText.propTypes = propTypes;
CopyText.defaultProps = defaultProps;
exports.default = CopyText;
