"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const classnames_1 = __importDefault(require("classnames"));
const CONST = __importStar(require("../CONST"));
/**
 * This mixin will add two methods to a component which are uses to add
 * and remove the error class from the component. Used great with refs and
 * form elements. You can see how it is used in component/list/item/formelement.jsx
 */
exports.default = {
    /**
     * Clear the error state of this element
     */
    clearError() {
        this.setState(this.getInitialState());
    },
    /**
     * Update the error state of this element
     *
     * @param {object} state - The current state of the component.
     * @returns {object} The updated state with modified classes.
     */
    handleErrorStateUpdate: (state) => ({
        classes: (0, classnames_1.default)(state.classes, CONST.UI.ERROR),
    }),
    /**
     * Display the error state of this element
     */
    showError() {
        this.setState(this.handleErrorStateUpdate);
    },
};
