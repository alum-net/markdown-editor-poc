declare namespace _default {
    /**
     * Converts an exponential number into it's non-exponential string equivalent
     *
     * @param {Number} num
     *
     * @returns {String}
     */
    function notExponential(num: number): string;
    /**
     * Format a number, similar to PHP's number_format.
     *
     * @param {Number} _a The number you want to format
     * @param {Number} [b="0"] The number of decimal places you want
     * @param {String} [_c=","] The decimal separator
     * @param {String} [d="."] The thousands separator
     *
     * @todo should be camelCase / needs refactor
     * @returns {String}
     */
    function number_format(_a: number, b?: number, _c?: string, d?: string): string;
    function generateRandom6DigitID(): number;
    /**
     * Converts a number to base 26 (using capital english letters as digits).
     *
     * @param {Number} num The number to convert to base 26.
     *
     * @returns {String} The number, converted to base 26.
     */
    function toBase26LetterCode(num: number): string;
    /**
     * Check if a number is finite and not NaN. i.e.
     *
     * @param {number} number The number to test
     *
     * @returns {Boolean} true if the number is finite and not NaN.
     */
    function isFiniteNumber(number: number): boolean;
    /**
     * Truncates the given number to the given precision.
     *
     * @param {number} number the number to truncate.
     * @param {number} decimals the number of decimals to keep.
     *
     * @returns {number} the truncated number.
     */
    function toPrecision(number: number, decimals: number): number;
    /**
     * Check if a number is between 2 numbers, including them.
     *
     * @param {number} number to check
     * @param {number} a the 1st limit
     * @param {number} b the 2nd limit
     *
     * @returns {boolean}
     */
    function isNumberBetween(number: number, a: number, b: number): boolean;
    /**
     * Returns how many decimals to display (used for currencies).
     *
     * @param {Number} rate
     * @return {Number}
     */
    function getDisplayDecimals(rate: number): number;
    namespace tax {
        /**
         * Calculate the pre-tax, or net amount
         *
         * @param {Number} total The total to calculate from, in negative cents
         * @param {UserDefinedField} taxUDF The tax UDF
         *
         * @returns {number} The pre-tax amount, in negative cents
         */
        function calculatePreTaxAmount(total: number, taxUDF: UserDefinedField): number;
        /**
         * Calculate the tax amount from the total.
         *
         * @param {Number} total The total to calculate from
         * @param {String} percentage The percentage, as a string, e.g. '20%'
         *
         * @returns {number} The amount of tax
         */
        function calculateTaxFromPercentage(total: number, percentage: string): number;
        /**
         * Calculate the tax amount from a divisor.
         *
         * @param {Number} total The total to calculate from
         * @param {Number} divisor The divisor (0.1 = 10%)
         *
         * @returns {number} The amount of tax
         */
        function calculateTaxFromDivisor(total: number, divisor: number): number;
    }
}
export default _default;
