import type { TextInput, TextInputProps } from 'react-native';
import React from 'react';
import type { MouseEvent } from 'react';
import type { TreeNode } from './web/utils/treeUtils';
import './web/MarkdownTextInput.css';
import type { MarkdownStyle } from './MarkdownTextInputDecoratorViewNativeComponent';
import type { MarkdownRange, InlineImagesInputProps } from './commonTypes';
interface MarkdownTextInputProps extends TextInputProps, InlineImagesInputProps {
    markdownStyle?: MarkdownStyle;
    parser: (text: string) => MarkdownRange[];
    formatSelection?: (text: string, selectionStart: number, selectionEnd: number, formatCommand: string) => FormatSelectionResult;
    onClick?: (e: MouseEvent<HTMLDivElement>) => void;
    dir?: string;
    disabled?: boolean;
}
interface MarkdownNativeEvent extends Event {
    inputType?: string;
    isComposing?: boolean;
    keyCode?: number;
}
type MarkdownTextInput = TextInput & React.Component<MarkdownTextInputProps>;
type Selection = {
    start: number;
    end: number;
};
type FormatSelectionResult = {
    updatedText: string;
    cursorOffset: number;
};
type MarkdownTextInputElement = HTMLDivElement & HTMLInputElement & {
    tree: TreeNode;
    uniqueId: string;
    selection: Selection;
    imageElements: HTMLImageElement[];
};
type HTMLMarkdownElement = HTMLElement & {
    value: string;
};
declare const MarkdownTextInput: React.ForwardRefExoticComponent<MarkdownTextInputProps & React.RefAttributes<MarkdownTextInput>>;
export default MarkdownTextInput;
export type { MarkdownNativeEvent, MarkdownTextInputProps, MarkdownTextInputElement, HTMLMarkdownElement };
declare function getWorkletRuntime(): void;
export { getWorkletRuntime };
//# sourceMappingURL=MarkdownTextInput.web.d.ts.map