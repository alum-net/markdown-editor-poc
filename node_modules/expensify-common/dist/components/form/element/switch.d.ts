export default Switch;
declare class Switch extends React.Component<any, any, any> {
    constructor(props: any);
    /**
     * Fires the change handler with the current value
     */
    fireChangeHandler(): void;
    /**
     * If there was a confirm object specified in our properties,
     * then we need to open a confirm modal with those settings
     *
     * @param {SyntheticEvent} e
     * @return {Boolean}
     */
    showConfirm(e: SyntheticEvent): boolean;
    checkbox: HTMLInputElement | null;
    element: HTMLSpanElement | null;
    componentDidMount(): void;
    /**
     * Gets the value of the field
     *
     * @return {boolean}
     */
    getValue(): boolean;
    render(): React.JSX.Element;
}
declare namespace Switch {
    export { propTypes };
    export { defaultProps };
}
import React from 'react';
declare namespace propTypes {
    let id: PropTypes.Validator<string>;
    let checked: PropTypes.Requireable<boolean>;
    let disabled: PropTypes.Requireable<boolean>;
    let onChange: PropTypes.Requireable<(...args: any[]) => any>;
    let confirm: PropTypes.Requireable<object>;
    let extraClasses: PropTypes.Requireable<NonNullable<string | object | null | undefined>>;
    let hideEnabledDisabledText: PropTypes.Requireable<boolean>;
    let tooltipText: PropTypes.Requireable<string>;
}
declare namespace defaultProps {
    let checked_1: boolean;
    export { checked_1 as checked };
    let disabled_1: boolean;
    export { disabled_1 as disabled };
    export function onChange_1(): void;
    export { onChange_1 as onChange };
    let confirm_1: null;
    export { confirm_1 as confirm };
    let extraClasses_1: never[];
    export { extraClasses_1 as extraClasses };
    let hideEnabledDisabledText_1: boolean;
    export { hideEnabledDisabledText_1 as hideEnabledDisabledText };
    let tooltipText_1: string;
    export { tooltipText_1 as tooltipText };
}
import PropTypes from 'prop-types';
