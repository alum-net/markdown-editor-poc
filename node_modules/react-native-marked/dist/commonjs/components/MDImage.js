"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const MDImage = ({
  uri,
  label,
  alt = "Image",
  style
}) => {
  const [imageState, setImageState] = (0, _react.useState)({
    isLoading: true,
    aspectRatio: undefined
  });

  /**
   * Fetches image dimension
   * Sets aspect ratio if resolved
   */
  const fetchOriginalSizeFromRemoteImage = () => {
    _reactNative.Image.getSize(uri, (width, height) => {
      if (width > 0 && height > 0) {
        setImageState({
          isLoading: false,
          aspectRatio: width / height
        });
      } else {
        setImageState({
          isLoading: false,
          aspectRatio: undefined
        });
      }
    }, () => {
      setImageState(current => {
        return {
          ...current,
          isLoading: false
        };
      });
    });
  };
  (0, _react.useEffect)(() => {
    fetchOriginalSizeFromRemoteImage();
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
    source: {
      uri: uri
    },
    style: {
      width: "100%",
      aspectRatio: imageState.aspectRatio
    },
    "aria-label": label,
    accessibilityRole: "image",
    accessibilityLabel: alt,
    accessibilityHint: undefined,
    imageStyle: style,
    testID: "react-native-marked-md-image",
    children: imageState.isLoading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      testID: "react-native-marked-md-image-activity-indicator",
      size: "small"
    }) : null
  });
};
var _default = exports.default = /*#__PURE__*/(0, _react.memo)(MDImage);
//# sourceMappingURL=MDImage.js.map