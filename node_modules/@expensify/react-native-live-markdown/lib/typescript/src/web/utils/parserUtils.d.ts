import type { HTMLMarkdownElement, MarkdownTextInputElement } from '../../MarkdownTextInput.web';
import type { TreeNode } from './treeUtils';
import type { PartialMarkdownStyle } from '../../styleUtils';
import type { InlineImagesInputProps, MarkdownRange } from '../../commonTypes';
type Paragraph = {
    text: string;
    start: number;
    length: number;
    markdownRanges: MarkdownRange[];
};
/**
 * For singleline markdown types, the function splits markdown ranges that spread beyond the line length into separate lines.
 * For multiline markdown types (like `pre`), it merges them and corresponding text into one line.
 */
declare function normalizeLines(lines: Paragraph[], ranges: MarkdownRange[]): Paragraph[];
/** Builds HTML DOM structure based on passed text and markdown ranges */
declare function parseRangesToHTMLNodes(text: string, ranges: MarkdownRange[], isMultiline?: boolean, markdownStyle?: PartialMarkdownStyle, disableInlineStyles?: boolean, currentInput?: MarkdownTextInputElement | null, inlineImagesProps?: InlineImagesInputProps): {
    dom: HTMLMarkdownElement;
    tree: TreeNode;
};
declare function updateInputStructure(parserFunction: (input: string) => MarkdownRange[], target: MarkdownTextInputElement, text: string, cursorPositionIndex: number | null, isMultiline?: boolean, markdownStyle?: PartialMarkdownStyle, alwaysMoveCursorToTheEnd?: boolean, shouldForceDOMUpdate?: boolean, shouldScrollIntoView?: boolean, inlineImagesProps?: InlineImagesInputProps): {
    text: string;
    cursorPosition: number;
};
export { updateInputStructure, parseRangesToHTMLNodes, normalizeLines };
export type { Paragraph };
//# sourceMappingURL=parserUtils.d.ts.map