"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.invoke = invoke;
exports.invokeAsync = invokeAsync;
exports.bulkInvoke = bulkInvoke;
exports.die = die;
exports.mapByName = mapByName;
const Utils = __importStar(require("./utils"));
/**
 * Invokes the given callback with the given arguments
 *
 * @param {Function} callback
 * @param {Array} [args]
 * @param {Object} [scope]
 *
 * @returns {Mixed}
 */
function invoke(callback, args, scope) {
    if (!Utils.isFunction(callback)) {
        return null;
    }
    return callback.apply(scope, args || []);
}
/**
 * This is nearly the same as invoke, except that it assumes that the callback returns a promise. The callback doesn't
 * HAVE to return a promise, but it CAN, and if it doesn't, then we provide a promise
 *
 * @param {Function} callback
 * @param {Array} [args]
 * @param {Object} [scope]
 *
 * @returns {Promise}
 */
function invokeAsync(callback, args, scope) {
    if (!Utils.isFunction(callback)) {
        return Promise.resolve();
    }
    let promiseFromCallback = callback.apply(scope, args || []);
    // If there was not a promise returned from the prefetch callback, then create a dummy promise and resolve it
    if (!promiseFromCallback) {
        promiseFromCallback = Promise.resolve();
    }
    return promiseFromCallback;
}
/**
 * Invokes all the given callbacks with the given arguments
 *
 * @param {Function[]} callbacks
 * @param {Array} [args]
 */
function bulkInvoke(callbacks, args) {
    callbacks.forEach((callback) => invoke(callback, args));
}
/**
 * Throws an uncaught error in an attempt to stop JS execution
 */
function die() {
    throw new Error('Aborting JavaScript execution');
}
/**
 * Call the method on a list of objects
 *
 * @param {object|array} list
 * @param {string} methodName
 * @returns {Array}
 */
function mapByName(list, methodName) {
    let arr = list;
    if (!Array.isArray(arr)) {
        arr = Object.values(arr);
    }
    return arr.map((item) => item[methodName].call(item));
}
